@page
@using ChinookAppEF.Models
@{
	ViewData["Title"] = "Invoices";
}

<h2 class="content-block">@ViewData["Title"]</h2>

@(Html.DevExtreme().DataGrid<DTOInvoice>()
	.ConfigureAppGridSettings("Invoice", nameof(DTOInvoice.InvoiceId), false, true, false)
	.Columns(columns => {

		columns.AddFor(m => m.InvoiceId);

		columns.AddFor(m => m.Date).SortIndex(0).SortOrder(SortOrder.Asc).AllowSorting(true);
		columns.AddFor(m => m.IsCorporate);
		columns.AddFor(m => m.CustomerId)
			.Lookup(lookup=> lookup
				.DataSource(d => d.Mvc().Controller("Customer").LoadAction("Lookup").Key("CustomerId"))
				.ValueExpr(nameof(DTOCustomerLookup.CustomerId))
				.DisplayExpr(nameof(DTOCustomerLookup.DisplayName))
			)
			.EditCellTemplate(new TemplateName("DropDownBoxTemplate"));

		columns.AddFor(m => m.Total);
		columns.AddFor(m => m.ItemCount);
		columns.AddFor(m => m.InvoiceId)
            .Width(50)
            .AllowFiltering(false)
            .AllowSorting(false)
            .CellTemplate(@<text>
                <div>
                    <a target="_blank" href="Reports/Invoice/<%- value %>">Invoice</a>
                </div>
            </text>);
	})
	.Editing(e=>e.Mode(GridEditMode.Popup)
			.AllowAdding(false)
			.AllowUpdating(true)
			.AllowDeleting(false)
			//.AllowUpdating(true)
			.Popup(p => p
				.Title("Invoice Details")
				.ShowTitle(true)
				.Width(700)
				.Height(525)
				.Position(pos => pos
					.My(HorizontalAlignment.Center, VerticalAlignment.Top)
					.At(HorizontalAlignment.Center, VerticalAlignment.Top)
					.Of(new JS("window"))
				)
			)
			.Form(f => f.Items(items =>
			{
				items.AddGroup()
					.ColCount(2)
					.ColSpan(2)
					.Items(groupItems =>
					{
						groupItems.AddSimpleFor(m => m.InvoiceId);
						groupItems.AddSimpleFor(m => m.Date);
					});

				items.AddGroup()
					.Caption("Customer")
					.ColCount(2)
					.ColSpan(2)
					.Items(groupItems =>
					{
						groupItems.AddSimpleFor(m => m.CustomerId);

					});
			}))
	)

	.FixEditingFromModel()
)

@using (Html.DevExtreme().NamedTemplate("DropDownBoxTemplate"))
{
	@(Html.DevExtreme().DropDownBox()
		.DataSource(d => d.Mvc().Controller("Customer").LoadAction("Lookup").Key("CustomerId"))
		.Value(new JS("value"))
		.ValueExpr(nameof(DTOCustomerLookup.CustomerId))
		.DisplayExpr(nameof(DTOCustomerLookup.DisplayName))
		.DropDownOptions(options => options.Width(500))
		.Option("setValue", new JS("setValue"))
		.ContentTemplate(new TemplateName("ContentTemplate"))
    )
}

@using (Html.DevExtreme().NamedTemplate("ContentTemplate"))
{
	@(Html.DevExtreme().DataGrid<DTOCustomerLookup>()
		.Height(350)
		.Columns(c => {
			c.AddFor(m=>m.Company);
			c.AddFor(m=>m.LastName);
			c.AddFor(m=>m.FirstName);
		})
		.Scrolling(s => s.Mode(GridScrollingMode.Virtual))
		.HoverStateEnabled(true)
		.Selection(s => s.Mode(SelectionMode.Single))
		.SelectedRowKeys(new JS("[component.option('value')]"))
		.FocusedRowEnabled(true)
		.FocusedRowKey(new JS("component.option('value')"))
		.OnSelectionChanged("function(selectionChangedArgs) { onSelectionChanged(selectionChangedArgs, component) }")
		.ConfigureAppGridSettings("Customer", nameof(DTOCustomerLookup.CustomerId), false, false, false)
    )
}

<script>
	function onSelectionChanged(selectionChangedArgs, component) {
		var setValue = component.option('setValue');
		var selectedRowKey = selectionChangedArgs.selectedRowKeys[0];

		component.option('value', selectedRowKey);
		setValue(selectedRowKey);
		if (selectionChangedArgs.selectedRowKeys.length > 0) {
			component.close();
		}
	}
</script>