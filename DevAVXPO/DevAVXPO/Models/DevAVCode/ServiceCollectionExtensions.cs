//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using Microsoft.Extensions.Configuration;
using DevAVXPO.Models.DevAV;
namespace DevAVXPO.Models.DevAV
{
	public partial class DevAVUnitOfWork : UnitOfWork
	{
		public DevAVUnitOfWork() : base() { }
		public DevAVUnitOfWork(DevExpress.Xpo.Metadata.XPDictionary dictionary) : base(dictionary) { }
		public DevAVUnitOfWork(IDataLayer layer, params IDisposable[] disposeOnDisconnect) : base(layer, disposeOnDisconnect) { }
		public DevAVUnitOfWork(IObjectLayer layer, params IDisposable[] disposeOnDisconnect) : base(layer, disposeOnDisconnect) { }
	}
}
namespace Microsoft.Extensions.DependencyInjection
{
	public static class DevAVXpoServiceCollectionExtensions
	{
		public static IServiceCollection AddDevAVAsXpoDefaultUnitOfWork(this IServiceCollection serviceCollection, bool useDataLayerAsSingletone = true, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoDefaultUnitOfWork(useDataLayerAsSingletone, optionsBuilder);
		}
		public static IServiceCollection AddDevAVAsXpoDefaultSession(this IServiceCollection serviceCollection, bool useDataLayerAsSingletone = true, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoDefaultSession(useDataLayerAsSingletone, optionsBuilder);
		}
		public static IServiceCollection AddDevAVUnitOfWork(this IServiceCollection serviceCollection, bool useDataLayerAsSingletone = true, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoCustomSession<DevAVUnitOfWork>(useDataLayerAsSingletone, optionsBuilder);
		}
		public static IServiceCollection AddDevAVXpoDefaultDataLayer(this IServiceCollection serviceCollection, ServiceLifetime lifetime, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoDefaultDataLayer(lifetime, customDataLayerOptionsBuilder);
		}
		public static IServiceCollection AddDevAVAsXpoDefaultUnitOfWork(this IServiceCollection serviceCollection, IConfiguration configuration, bool useDataLayerAsSingletone = true, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoDefaultUnitOfWork(useDataLayerAsSingletone, o => { o.UseConnectionStringForDevAV(configuration); optionsBuilder(o); });
		}
		public static IServiceCollection AddDevAVAsXpoDefaultSession(this IServiceCollection serviceCollection, IConfiguration configuration, bool useDataLayerAsSingletone = true, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoDefaultSession(useDataLayerAsSingletone, o => { o.UseConnectionStringForDevAV(configuration); optionsBuilder(o); });
		}
		public static IServiceCollection AddDevAVUnitOfWork(this IServiceCollection serviceCollection, IConfiguration configuration, bool useDataLayerAsSingletone = true, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoCustomSession<DevAVUnitOfWork>(useDataLayerAsSingletone, o => { o.UseConnectionStringForDevAV(configuration); optionsBuilder(o); });
		}
		public static IServiceCollection AddDevAVXpoDefaultDataLayer(this IServiceCollection serviceCollection, IConfiguration configuration, ServiceLifetime lifetime, Action<DataLayerOptionsBuilder> customDataLayerOptionsBuilder = null)
		{
			Action<DataLayerOptionsBuilder> optionsBuilder = CreateDataLayerOptionsBuilder(customDataLayerOptionsBuilder);
			return serviceCollection.AddXpoDefaultDataLayer(lifetime, o => { o.UseConnectionStringForDevAV(configuration); optionsBuilder(o); });
		}
		public static DataLayerOptionsBuilder UseConnectionStringForDevAV(this DataLayerOptionsBuilder options, IConfiguration configuration)
		{
			return options.UseConnectionString(configuration.GetConnectionString(ConnectionHelper.ConnectionStringName));
		}
		static Action<DataLayerOptionsBuilder> CreateDataLayerOptionsBuilder(Action<DataLayerOptionsBuilder> injectCustomDataLayerOptionsBuilder)
		{
			return (options) =>
			{
				options
				.UseNullableBehavior(NullableBehavior.ByUnderlyingType)
				.UseEntityTypes(ConnectionHelper.GetPersistentTypes());
				if (injectCustomDataLayerOptionsBuilder != null)
				{
					injectCustomDataLayerOptionsBuilder(options);
				}
			};
		}
	}
}
